{"version":3,"sources":["views/css/RegistrationView.module.css","views/RegistrationView.js"],"names":["module","exports","RegistrationView","state","name","email","password","onNameChange","e","setState","currentTarget","value","onEmailChange","onPasswordChange","handleSubmit","preventDefault","toast","error","length","props","onRegister","className","styles","form","onSubmit","this","autoComplete","htmlFor","nameInputId","id","input","type","onChange","textPass","button","variant","Component","connect","errorReg","authSelectors","getAuthError","dispatch","data","authOperations","register"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,+BAA+B,KAAO,+BAA+B,MAAQ,gCAAgC,OAAS,iCAAiC,SAAW,qC,2JCQrLC,E,4MACFC,MAAQ,CACJC,KAAM,GACNC,MAAO,GACPC,SAAU,I,EAGdC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEL,KAAMI,EAAEE,cAAcC,S,EAG1CC,cAAgB,SAAAJ,GACZ,EAAKC,SAAS,CAAEJ,MAAOG,EAAEE,cAAcC,S,EAG3CE,iBAAmB,SAAAL,GACf,EAAKC,SAAS,CAAEH,SAAUE,EAAEE,cAAcC,S,EAG9CG,aAAe,SAAAN,GACXA,EAAEO,iBACsB,KAApB,EAAKZ,MAAMC,MACXY,IAAMC,MAAM,qHACW,KAArB,EAAKd,MAAME,OACbW,IAAMC,MAAM,gKACV,EAAKd,MAAMG,SAASY,OAAS,EAC/BF,IAAMC,MAAM,kHAEZ,EAAKE,MAAMC,WAAW,EAAKjB,OAC3B,EAAKM,SAAS,CAAEL,KAAM,GAAIC,MAAO,GAAIC,SAAU,O,4CAIvD,WACI,OACI,mCACI,uBAAMe,UAAWC,IAAOC,KAAMC,SAAUC,KAAKX,aAAcY,aAAa,MAAxE,UACI,kNACA,uBAAOC,QAASF,KAAKG,YAArB,gCACA,uBACIxB,KAAK,OACLyB,GAAIJ,KAAKG,YACTP,UAAWC,IAAOQ,MAClBC,KAAK,OACLC,SAAUP,KAAKlB,aACfI,MAAOc,KAAKtB,MAAMC,OAEtB,kGACA,uBACIA,KAAK,QACLiB,UAAWC,IAAOQ,MAClBC,KAAK,OACLC,SAAUP,KAAKb,cACfD,MAAOc,KAAKtB,MAAME,QAEtB,0EACA,uBACID,KAAK,WACLiB,UAAWC,IAAOQ,MAClBC,KAAK,OACLC,SAAUP,KAAKZ,iBACfF,MAAOc,KAAKtB,MAAMG,WAEtB,mBAAGe,UAAWC,IAAOW,SAArB,yQACA,cAAC,IAAD,CAAQZ,UAAWC,IAAOY,OAAQC,QAAQ,UAAUJ,KAAK,SAAzD,oEACA,cAAC,IAAD,a,GAjEWK,aAiFhBC,uBATS,SAAAlC,GAAK,MAAK,CAE9BmC,SAAUC,IAAcC,aAAarC,OAGd,SAAAsC,GAAQ,MAAK,CACpCrB,WAAY,SAACsB,GAAD,OAAUD,EAASE,IAAeC,SAASF,QAG5CL,CAA6CnC","file":"static/js/7.72d635f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"RegistrationView_logo__1x3hi\",\"form\":\"RegistrationView_form__Mzsxe\",\"input\":\"RegistrationView_input__Ql9rD\",\"button\":\"RegistrationView_button__RKUXx\",\"textPass\":\"RegistrationView_textPass__2XWtd\"};","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport styles from './css/RegistrationView.module.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass RegistrationView extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    onNameChange = e => {\r\n        this.setState({ name: e.currentTarget.value})\r\n    }\r\n\r\n    onEmailChange = e => {\r\n        this.setState({ email: e.currentTarget.value})\r\n    }\r\n\r\n    onPasswordChange = e => {\r\n        this.setState({ password: e.currentTarget.value})\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (this.state.name === '') {\r\n            toast.error('Поле \"Имя\" не заполнено');\r\n        } if (this.state.email === '') { \r\n            toast.error('Поле \"Адрес почты\" не заполнено'); \r\n        } if (this.state.password.length < 7) { \r\n            toast.error('Неправильный пароль'); \r\n        } else {\r\n            this.props.onRegister(this.state);\r\n            this.setState({ name: '', email: '', password: '' });\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form className={styles.form} onSubmit={this.handleSubmit} autoComplete='off'>\r\n                    <h2>Регистрация нового пользователя</h2>\r\n                    <label htmlFor={this.nameInputId}>Имя</label>\r\n                    <input\r\n                        name='name'\r\n                        id={this.nameInputId}\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        onChange={this.onNameChange}\r\n                        value={this.state.name}\r\n                    />\r\n                    <label>Адрес почты</label>\r\n                    <input\r\n                        name='email'\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        onChange={this.onEmailChange}\r\n                        value={this.state.email}\r\n                    />\r\n                    <label>Пароль*</label>\r\n                    <input\r\n                        name='password'\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        onChange={this.onPasswordChange}\r\n                        value={this.state.password}\r\n                    />\r\n                    <p className={styles.textPass}>*Пароль должен состоять не менее, чем из 8 символов</p>\r\n                    <Button className={styles.button} variant=\"primary\" type=\"submit\">Отправить</Button>\r\n                    <ToastContainer />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    // isLoadingAuth: authSelectors.getAuthLoading(state),\r\n    errorReg: authSelectors.getAuthError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRegister: (data) => dispatch(authOperations.register(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationView);\r\n\r\n\r\n// {this.state.alert &&\r\n//                         <ToastContainer\r\n//                         position=\"top-right\"\r\n//                         autoClose={5000}\r\n//                         hideProgressBar={false}\r\n//                         newestOnTop={false}\r\n//                         closeOnClick\r\n//                         rtl={false}\r\n//                         pauseOnFocusLoss\r\n//                         draggable\r\n//                         pauseOnHover\r\n//                         />}"],"sourceRoot":""}